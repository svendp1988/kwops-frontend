/* tslint:disable */
/* eslint-disable */
/**
 * kwops API
 * kwops API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AllEmployees } from '../models';
// @ts-ignore
import { EmployeeCreateDto } from '../models';
// @ts-ignore
import { EmployeeDetailsDto } from '../models';
/**
 * EmployeeControllerApi - axios parameter creator
 * @export
 */
export const EmployeeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST employees
         * @param {EmployeeCreateDto} employeeCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (employeeCreateDto: EmployeeCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeCreateDto' is not null or undefined
            assertParamExists('add', 'employeeCreateDto', employeeCreateDto)
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST employees/{number}/dismiss
         * @param {string} number 
         * @param {boolean} [withNotice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismiss: async (number: string, withNotice?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('dismiss', 'number', number)
            const localVarPath = `/employees/{number}/dismiss`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withNotice !== undefined) {
                localVarQueryParameter['withNotice'] = withNotice;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployees: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET employees/{number}
         * @param {string} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByNumber: async (number: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('getByNumber', 'number', number)
            const localVarPath = `/employees/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeControllerApi - functional programming interface
 * @export
 */
export const EmployeeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST employees
         * @param {EmployeeCreateDto} employeeCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(employeeCreateDto: EmployeeCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(employeeCreateDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeeControllerApi.add']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary POST employees/{number}/dismiss
         * @param {string} number 
         * @param {boolean} [withNotice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dismiss(number: string, withNotice?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dismiss(number, withNotice, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeeControllerApi.dismiss']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GET employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmployees(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllEmployees>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEmployees(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeeControllerApi.getAllEmployees']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GET employees/{number}
         * @param {string} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByNumber(number: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByNumber(number, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeeControllerApi.getByNumber']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EmployeeControllerApi - factory interface
 * @export
 */
export const EmployeeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary POST employees
         * @param {EmployeeCreateDto} employeeCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(employeeCreateDto: EmployeeCreateDto, options?: any): AxiosPromise<void> {
            return localVarFp.add(employeeCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST employees/{number}/dismiss
         * @param {string} number 
         * @param {boolean} [withNotice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismiss(number: string, withNotice?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.dismiss(number, withNotice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployees(options?: any): AxiosPromise<AllEmployees> {
            return localVarFp.getAllEmployees(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET employees/{number}
         * @param {string} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByNumber(number: string, options?: any): AxiosPromise<EmployeeDetailsDto> {
            return localVarFp.getByNumber(number, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeControllerApi - interface
 * @export
 * @interface EmployeeControllerApi
 */
export interface EmployeeControllerApiInterface {
    /**
     * 
     * @summary POST employees
     * @param {EmployeeCreateDto} employeeCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApiInterface
     */
    add(employeeCreateDto: EmployeeCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary POST employees/{number}/dismiss
     * @param {string} number 
     * @param {boolean} [withNotice] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApiInterface
     */
    dismiss(number: string, withNotice?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary GET employees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApiInterface
     */
    getAllEmployees(options?: RawAxiosRequestConfig): AxiosPromise<AllEmployees>;

    /**
     * 
     * @summary GET employees/{number}
     * @param {string} number 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApiInterface
     */
    getByNumber(number: string, options?: RawAxiosRequestConfig): AxiosPromise<EmployeeDetailsDto>;

}

/**
 * EmployeeControllerApi - object-oriented interface
 * @export
 * @class EmployeeControllerApi
 * @extends {BaseAPI}
 */
export class EmployeeControllerApi extends BaseAPI implements EmployeeControllerApiInterface {
    /**
     * 
     * @summary POST employees
     * @param {EmployeeCreateDto} employeeCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public add(employeeCreateDto: EmployeeCreateDto, options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).add(employeeCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST employees/{number}/dismiss
     * @param {string} number 
     * @param {boolean} [withNotice] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public dismiss(number: string, withNotice?: boolean, options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).dismiss(number, withNotice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET employees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public getAllEmployees(options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).getAllEmployees(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET employees/{number}
     * @param {string} number 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public getByNumber(number: string, options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).getByNumber(number, options).then((request) => request(this.axios, this.basePath));
    }
}

