/**
 * Generated by orval v6.29.1 🍺
 * Do not edit manually.
 * kwops API
 * kwops API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AllEmployees,
  EmployeeDetailsDto,
  TeamDetailsDto
} from './orval.schemas'

export const getGetAllResponseMock = (): TeamDetailsDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({developers: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), rating: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), name: faker.helpers.arrayElement([faker.word.sample(), undefined])})))

export const getGetByNumberResponseMock = (overrideResponse: Partial< EmployeeDetailsDto > = {}): EmployeeDetailsDto => ({endDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), number: faker.helpers.arrayElement([faker.word.sample(), undefined]), startDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), ...overrideResponse})

export const getGetAllEmployeesResponseMock = (overrideResponse: Partial< AllEmployees > = {}): AllEmployees => ({employees: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({endDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), number: faker.helpers.arrayElement([faker.word.sample(), undefined]), startDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})), undefined]), ...overrideResponse})


export const getGetAllMockHandler = (overrideResponse?: TeamDetailsDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => TeamDetailsDto[])) => {
  return http.get('*/teams', async (info) => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? overrideResponse(info) : overrideResponse) 
            : getGetAllResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAssembleDevelopersForTeamMockHandler = () => {
  return http.post('*/teams/assemble', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetByNumberMockHandler = (overrideResponse?: EmployeeDetailsDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => EmployeeDetailsDto)) => {
  return http.get('*/employees/:number', async (info) => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? overrideResponse(info) : overrideResponse) 
            : getGetByNumberResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetAllEmployeesMockHandler = (overrideResponse?: AllEmployees | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => AllEmployees)) => {
  return http.get('*/employees', async (info) => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? overrideResponse(info) : overrideResponse) 
            : getGetAllEmployeesResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAddMockHandler = () => {
  return http.post('*/employees', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDismissMockHandler = () => {
  return http.post('*/employees/:number/dismiss', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getKwopsAPIMock = () => [
  getGetAllMockHandler(),
  getAssembleDevelopersForTeamMockHandler(),
  getGetByNumberMockHandler(),
  getGetAllEmployeesMockHandler(),
  getAddMockHandler(),
  getDismissMockHandler()]
